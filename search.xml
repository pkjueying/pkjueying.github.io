<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[yii项目实践]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/18/yii%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$criteria = <span class="keyword">new</span> CDbCriteria();  </span><br><span class="line">$criteria-&gt;order = <span class="string">' ctimedesc'</span>;         <span class="comment">//按什么字段来排序  </span></span><br><span class="line">$count =NewsComments::model()-&gt;count($criteria);<span class="comment">//count()函数计算数组中的单元数目或对象中的属性个数。  </span></span><br><span class="line">$pager = <span class="keyword">new</span> CPagination($count);  </span><br><span class="line">$pager -&gt; pageSize =<span class="number">5</span>;                           <span class="comment">//每页显示的行数  </span></span><br><span class="line">$pager-&gt;applyLimit($criteria);  </span><br><span class="line">$newsCommentList =NewsComments::model()-&gt;findAll($criteria);<span class="comment">//查询所有的数据  </span></span><br><span class="line">  </span><br><span class="line">$this-&gt;render(<span class="string">'view'</span> , <span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'pages'</span>=&gt;$pager,  </span><br><span class="line">    <span class="string">'list'</span>=&gt;$newsCommentList,  </span><br><span class="line">  ));  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">//然后在view视图中：  </span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> $this-&gt;widget(<span class="string">'CLinkPager'</span>,<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'header'</span>=&gt;<span class="string">''</span>,  </span><br><span class="line">  <span class="string">'firstPageLabel'</span>=&gt;<span class="string">'首页'</span>,  </span><br><span class="line">  <span class="string">'lastPageLabel'</span>=&gt;<span class="string">'末页'</span>,  </span><br><span class="line">  <span class="string">'prevPageLabel'</span>=&gt;<span class="string">'上一页'</span>,  </span><br><span class="line">  <span class="string">'nextPageLabel'</span>=&gt;<span class="string">'下一页'</span>,  </span><br><span class="line">  <span class="string">'pages'</span>=&gt;$pages,  </span><br><span class="line">  <span class="string">'maxButtonCount'</span>=&gt;<span class="number">13</span>,  </span><br><span class="line"> ));  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在时间段中查找相应数据"><a href="#在时间段中查找相应数据" class="headerlink" title="在时间段中查找相应数据"></a>在时间段中查找相应数据</h3><p>‘’’php </p>
<p>&lt;?php<br>//在Models的search()函数中添加<br>$criteria-&gt;compare(‘mtime’,’&gt;=’.$this-&gt;ctime,true);<br>$criteria-&gt;compare(‘mtime’,’&lt;=’.$this-&gt;mtime,true);<br>?&gt;<br>//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  </p>
<p> &lt;?php echo $form-&gt;label($model,’ctime’);?&gt;<br> &lt;?php<br>  $this-&gt;widget(‘application.extensions.timepicker.timepicker’,array(<br>    ‘model’=&gt;$model,<br>    ‘name’=&gt;’ctime’,<br>  ));<br> ?&gt;  </p>
<p> &lt;?php<br>  $this-&gt;widget(‘application.extensions.timepicker.timepicker’,array(<br>    ‘model’=&gt;$model,<br>    ‘name’=&gt;’mtime’,<br>  ));<br> ?&gt;  </p>
<p>‘’’</p>
<h3 id="在数据库表中新添字段时，需要在对应Models中的rules-方法中进行说明。"><a href="#在数据库表中新添字段时，需要在对应Models中的rules-方法中进行说明。" class="headerlink" title="在数据库表中新添字段时，需要在对应Models中的rules()方法中进行说明。"></a>在数据库表中新添字段时，需要在对应Models中的rules()方法中进行说明。</h3><h3 id="需要对查询的数据进行排序显示时，可以再Models的search-方法中添加如下代码"><a href="#需要对查询的数据进行排序显示时，可以再Models的search-方法中添加如下代码" class="headerlink" title="需要对查询的数据进行排序显示时，可以再Models的search()方法中添加如下代码:"></a>需要对查询的数据进行排序显示时，可以再Models的search()方法中添加如下代码:</h3><p>‘’’php</p>
<p>&lt;?php&gt;<br>return new CActiveDataProvider(get_class($this), array(<br>  ‘pagination’=&gt;array(<br>    ‘pageSize’=&gt;20,//设置每页显示20条<br>  ),<br>  ‘sort’=&gt;array(<br>    ‘defaultOrder’=&gt;’comment_idDESC’, //按指定的字段进行排序<br>  ),<br>  ‘criteria’=&gt;$criteria,<br>));<br>?&gt;<br>‘’’</p>
<h3 id="在视图中显示非数据库表中的数据"><a href="#在视图中显示非数据库表中的数据" class="headerlink" title="在视图中显示非数据库表中的数据"></a>在视图中显示非数据库表中的数据</h3><p>//a.首先在视图中将对应的字段进行替换。如<br>‘’’php</p>
<p>&lt;?php<br>//   ‘status’,<br>array(<br>  ‘name’=&gt;’status’,<br>  ‘type’=&gt;’raw’,<br>  ‘value’=&gt;array($this,’showStatus’)<br>),<br>?&gt;<br>‘’’</p>
<p>//b.然后在对应的控制器中写相应的方法。如<br>‘’’php</p>
<p>&lt;?php<br>public function showStatus($data, $row, $c)<br>{<br> switch ($data-&gt;status)<br> {<br>  case ‘ready’:<br>   return’准备’;<br>  case ‘locked’:<br>   return ‘锁定’;<br>  case ‘open’:<br>   return’打开’;<br>  case ‘removed’:<br>   return’删除’;<br> }<br>}<br>?&gt;<br>‘’’</p>
<h3 id="修改admin视图下默认的CButtonColumn"><a href="#修改admin视图下默认的CButtonColumn" class="headerlink" title="修改admin视图下默认的CButtonColumn"></a>修改admin视图下默认的CButtonColumn</h3><p>‘’’php</p>
<p>&lt;?php<br>array(<br> ‘class’=&gt;’CButtonColumn’,<br> ‘template’=&gt;’{comment} {view}{update} {delete}’,<br> ‘buttons’=&gt;array(<br>  ‘comment’ =&gt;array(<br>   ‘label’=&gt;’评论’,<br>   ‘imageUrl’=&gt;Yii::app()-&gt;request-&gt;baseUrl.’/images/icons/coins.png’,<br>   ‘url’=&gt;’Yii::app()-&gt;createUrl(“newsComments/index”,array(“news_id”=&gt;$data-&gt;news_id, ))’,//始终使用$data来获取相关的数据。<br>  ),<br> ),<br> ‘htmlOptions’ =&gt; array(<br>   ‘style’=&gt;’width:100px’,<br> ),<br>),<br>?&gt;<br>‘’’</p>
<p>//7.需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。  </p>
<script type="text/javascript" src="../pkjueying/ckfinder/ckfinder.js"></script>  
<script type="text/javascript">  
function BrowseServer(imgId)  
{  
 var finder = new CKFinder() ;  
 finder.basePath = '../pkjueying/ckfinder/';//导入CKFinder的路径  
 finder.selectActionFunction = SetFileField;//设置文件被选中时的函数  
 finder.selectActionData = imgId; //接收地址的inputID  
 finder.popup() ;  
}  
//文件选中时执行  
function SetFileField(fileUrl,data)  
{  
 document.getElementByIdx_x_x(data["selectActionData"]).value= fileUrl ;  
}  
</script>  

<div class="row"><br> &lt;?php echo$form-&gt;labelEx($model,’editor_avatar’);?&gt;<br> &lt;?php echo$form-&gt;textField($model ,’editor_avatar’ ,array(‘id’=&gt;’editor_avatar’, ));?&gt;<br> <input type="button" value=" 浏 览 " onclick="BrowseServer('editor_avatar');"><br> &lt;?php echo$form-&gt;error($model,’editor_avatar’);?&gt;<br></div>  

<p>//8.再利用YII的第三方ckeditor+ckfinder控件时，示例代码如下：<br>&lt;?php<br>echo $form-&gt;labelEx($model,’summary’);<br>$form-&gt;widget(‘application.extensions.editor.CKkceditor’,array(<br>  “model” =&gt;$model, // 数据模型<br>  “attribute” =&gt;’summary’, // 文本域中的字段，也就是之前文本域的名字<br>  “height” =&gt;’200px’, // 编辑器的高度<br>  “width” =&gt;’80%’,         //编辑器的宽度<br>  “filespath”=&gt;SITE_PATH.”www/data/upload”,<br>  “filesurl”=&gt;Yii::app()-&gt;baseUrl.”/data/upload”,<br>  )<br>);<br>echo $form-&gt;error($model,’summary’);<br>?&gt;  </p>
<p>//9.由数据库表生成所需的代码<br>&lt;?php<br>‘modules’ =&gt;   array(<br> ‘gii’=&gt;array(<br>  ‘class’=&gt;’system.gii.GiiModule’,<br>  ‘password’=&gt;’pkjueying’,<br>  // If removed, Gii defaults tolocalhost only. Edit carefully to taste.<br>  ‘ipFilters’=&gt;array(‘10.10.16.43’,’10.10.16.18’,’10.10.16.47’,’::1’),<br> ),<br>),<br>?&gt;  </p>
<p>//10.由Yii生成静态页面<br>&lt;?php<br>//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：<br>$out_file = $this-&gt;render($view,$data,true);<br>save_to_html($path, $out_file);//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名<br>unset($outFile);<br>?&gt;  </p>
<p>//11.yii的controller中外挂action<br>&lt;?php<br>class UpdateAction extends CAction {<br>  public function run() {<br> // place the action logichere<br>  }<br>}  </p>
<p>class PostController extends CController{<br>  public function actions(){<br> return array(‘edit’=&gt;’application.controllers.post.UpdateAction’,);<br>  }<br>  ….<br>}<br>?&gt;  </p>
<p>//12.Yii如何使用theme<br>&lt;?php<br>//在main.php 里面配置<br>return array(<br>  ‘theme’=&gt;’basic’,<br>  //……<br>);<br>//要使用theme里面的资源的话，比如说images, js, css, 应该这样，<br>Yii::app()-&gt;theme-&gt;baseUrl.”/images/FileName.gif”<br>Yii::app()-&gt;Theme-&gt;baseUrl.”/css/default/common.css”  </p>
<p>?&gt;  </p>
<p>//13.Yii 如何在当前页面注册css和js文件<br>&lt;?php<br> $cs=Yii::app()-&gt;clientScript;<br> $cs-&gt;registerCssFile($cssFile);<br> $cs-&gt;registerScriptFile($jsFile);<br>?&gt;  </p>
<p>//14.使用widget方式。<br>//a.显示详细信息<br>&lt;?php<br>$this-&gt;widget(‘zii.widgets.CDetailView’,array(<br>    ‘data’=&gt; $model,<br>    ‘attributes’=&gt; array(<br>       ‘id’,<br>       ‘title’,<br>       ‘content’,<br>   ),<br>);<br>?&gt;<br>//b.显示列表，可以进行条件限制和分页<br>&lt;?php<br>//controller中<br>$dataProvider = new CActiveDataProvider(‘Post’,array(<br>    ‘criteria’=&gt; array(<br>           ‘condition’ =&gt; ‘project_id =:project_id’,<br>           ‘params’ =&gt; array(‘:project_id’ =&gt;$pid),<br>       ),<br>    ‘pagination’=&gt; array(<br>       ‘pageSize’ =&gt; ‘5’,<br>   ),<br>));<br>//视图中<br>$this-&gt;widget(‘zii.widgets.CListView’,array(<br> ‘dataProvider’ =&gt; $dataProvider,//数据源<br> ‘itemView’ =&gt; ‘_view’,//渲染子视图，传给模板的值用$data接收。<br> ),<br>);<br>?&gt;  </p>
<p>//c.显示列表，但是结果会在表格中显示<br>&lt;?php<br>   $this-&gt;widget(‘zii.widgets.grid.CGridView’,array(<br>       ‘dataProvider’=&gt;$dataProvider,//数据源<br>       ‘columns’=&gt;array(<br>           ‘title’,         // display the ‘title’ attribute<br>           ‘category.name’,  // display the ‘name’ attributeof the ‘category’ relation//显示与category相关的name<br>           ‘content:html’,   // display the’content’ attribute as purified HTML显示净化过的HTML格式<br>           array(           // display ‘create_time’ using anexpression<br>               ‘name’=&gt;’create_time’,<br>               ‘value’=&gt;’date(“M j, Y”,$data-&gt;create_time)’,<br>           ),<br>           array(           // display ‘author.username’ using anexpression<br>               ‘name’=&gt;’authorName’,<br>               ‘value’=&gt;’$data-&gt;author-&gt;username’,<br>           ),<br>   array(   //display the ‘status’ attribute of controller’s functionshowStatus($data, $row, $c)<br>    ‘name’=&gt;’status’,<br>    ‘type’=&gt;’raw’,<br>    ‘value’=&gt;array($this,’showStatus’)<br>   ),<br>           array(           // display a column with “view”, “update” and “delete”buttons<br>               ‘class’=&gt;’CButtonColumn’,<br>           ),<br>       ),<br>       ‘filter’=&gt;$model,//对用户的输入进行过滤<br>   ));<br>?&gt;  </p>
<p>//15.Yii::app()-&gt;user的使用。  </p>
<p>//16.Yii中urlManager的配置<br>//a.apache下：在config/main.php的components节点下增加：<br>&lt;?php<br> ‘urlManager’=&gt;array(<br>  ‘urlFormat’=&gt;’path’,<br>  ‘rules’=&gt;array(<br>   ‘<controller:\w+>/<id:\d+>‘=&gt;’<controller>/view’,<br>   ‘<controller:\w+>/<action:\w+>/<id:\d+>‘=&gt;’<controller>/<action>‘,<br>   ‘<controller:\w+>/<action:\w+>‘=&gt;’<controller>/<action>‘,<br>  ),<br> ),<br>?&gt;<br>//b.apache配置：<br>在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：<br>Options +FollowSymLinks<br>IndexIgnore <em>/</em><br>RewriteEngine on<br># if a directory or a file exists, use it directly<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br># otherwise forward it to index.php<br>RewriteRule . index.php  </action></controller></action:\w+></controller:\w+></action></controller></id:\d+></action:\w+></controller:\w+></controller></id:\d+></controller:\w+></p>
<p>//c.nginx下的配置<br>//在config/main.php的components节点下增加：<br>&lt;?php<br> ‘urlManager’=&gt;array(<br>  ‘urlFormat’=&gt;’path’,<br>  ‘rules’=&gt;array(<br>   ‘<controller:\w+>/<id:\d+>‘=&gt;’<controller>/view’,<br>   ‘<controller:\w+>/<action:\w+>/<id:\d+>‘=&gt;’<controller>/<action>‘,<br>   ‘<controller:\w+>/<action:\w+>‘=&gt;’<controller>/<action>‘,<br>  ),<br> ),<br>?&gt;<br>//step2：<br>//在nginx.conf的server 段添加:<br>location / {<br>    if (!-e$request_filename){<br>       rewrite ^/(.*) /index.php last;<br>   }<br>}  </action></controller></action:\w+></controller:\w+></action></controller></id:\d+></action:\w+></controller:\w+></controller></id:\d+></controller:\w+></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[罗马人的故事01]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/18/%E7%BD%97%E9%A9%AC%E4%BA%BA%E7%9A%84%E6%95%85%E4%BA%8B01/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[binder简要学习]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/17/binder01/</url>
      <content type="html"><![CDATA[<h1 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h1><h3 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>
<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>
<p>本文目标:</p>
<ul>
<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>
</li>
<li><p>弄明白AIDL生成的相关代码</p>
</li>
<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>
</li>
</ul>
<h3 id="Linux相关概念"><a href="#Linux相关概念" class="headerlink" title="Linux相关概念"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href="https://book.douban.com/subject/1503819/" target="_blank" rel="external">linux内核设计与实现</a> 其主要是讲一些系统概念</p>
<ul>
<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>
</li>
<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>
</li>
<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>
</li>
<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>
</li>
<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>
</li>
<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>
<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>
<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>
</li>
<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>
</li>
</ul>
<h3 id="为何使用Binder"><a href="#为何使用Binder" class="headerlink" title="为何使用Binder"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>
<p>主要是考虑到性能和安全，还有易用. </p>
<ul>
<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>
</li>
<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>
</li>
<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>
</li>
<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>
</li>
</ul>
<blockquote>
<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>
</blockquote>
<h3 id="Binder通信模型"><a href="#Binder通信模型" class="headerlink" title="Binder通信模型"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>
<p><img src="/img/binder/binder通信概述.jpg" alt="Binder通信概述"></p>
<ol>
<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>
<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>
<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>
<li>代理接口将该Parcel发送给内核中的binder driver.</li>
<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>
<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>
</ol>
<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>
<p><img src="/img/binder/binder-通信模型.jpg" alt="Binder通信模型"></p>
<p>整个步骤如下: </p>
<ul>
<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>
</li>
<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>
</li>
<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>
<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>
</li>
</ul>
<blockquote>
<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>
</blockquote>
<h3 id="Binder机制跨进程原理"><a href="#Binder机制跨进程原理" class="headerlink" title="Binder机制跨进程原理"></a>Binder机制跨进程原理</h3><p><img src="/img/binder/binder-跨进程原理.jpg" alt="Binder机制跨进程原理"></p>
<ul>
<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>
<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,
    bool allowIsolated)
{
    Parcel data, reply;
data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());
    data.writeString16(name);
    data.writeStrongBinder(service);
    data.writeInt32(allowIsolated ? 1 : 0);
    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);
    return err == NO_ERROR ? reply.readExceptionCode() : err;
}
</code></pre></li>
<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>
</li>
<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>
</li>
</ul>
<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>
<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>
<pre><code>public static ICalculate asInterface(IBinder obj) {
        if(obj == null) {
            return null;
        } else {
            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);
            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));
        }
    }
</code></pre><blockquote>
<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>
</blockquote>
<h3 id="proxy代理模式"><a href="#proxy代理模式" class="headerlink" title="proxy代理模式"></a>proxy代理模式</h3><p>模式中的三种角色:</p>
<p><img src="/img/binder/proxy_uml.jpg" alt="proxy设计模式"></p>
<ul>
<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>
</li>
<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>
</li>
<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>
</li>
</ul>
<blockquote>
<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>
</blockquote>
<h3 id="驱动里面的Binder"><a href="#驱动里面的Binder" class="headerlink" title="驱动里面的Binder"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Binder设计与实现</a> 一文</p>
<h3 id="Java层的Binder"><a href="#Java层的Binder" class="headerlink" title="Java层的Binder"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>
<ul>
<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>
</li>
<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>
</li>
<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>
</li>
<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>
</li>
</ul>
<h3 id="AIDL过程分析"><a href="#AIDL过程分析" class="headerlink" title="AIDL过程分析"></a>AIDL过程分析</h3><p>一种固定的模式：</p>
<ul>
<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>
</ul>
<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo."></a>demo.</h3><p>……</p>
<h3 id="系统服务分析"><a href="#系统服务分析" class="headerlink" title="系统服务分析"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>
<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>
<ul>
<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>
</li>
<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>
</li>
<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>
<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>
<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>
<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>
<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>
</li>
</ul>
<p>再看看ActivityManager中的Binder。</p>
<ul>
<li><p>IActivityManager对应IXXX接口</p>
</li>
<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>
</li>
<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>
<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>
<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://book.douban.com/subject/1503819/" target="_blank" rel="external">linux内核设计与实现</a></p>
</li>
<li><p><a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Binder设计与实现</a></p>
</li>
<li><p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每天随记]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/17/thingking-everyday/</url>
      <content type="html"><![CDATA[<h1 id="Who"><a href="#Who" class="headerlink" title="Who"></a>Who</h1><p>who am I?</p>
<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>hello, It’s me.</p>
]]></content>
    </entry>
    
  
  
</search>
