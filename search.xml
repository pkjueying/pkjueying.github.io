<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android 启动过程代码跟踪]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/18/Android-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E4%BB%A3%E7%A0%81%E8%B7%9F%E8%B8%AA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>准备工作：Android源码，UnderStand源码阅读工具</p>
</blockquote>
<p>我们知道Android系统在启动时首先会启动Linux系统，引导加载Linux Kernel并启动init进程。Init进程是一个由内核启动的用户级进程，是Android系统的第一个进程。该进程的相关代码在android/system/core/init/init.c。在main函数中，有如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">init_parse_config_file(<span class="string">"/init.rc"</span>);</span><br><span class="line"></span><br><span class="line"> action_for_each_trigger(<span class="string">"early-init"</span>, action_add_queue_tail);</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* execute all the boot actions to get us started */</span></span><br><span class="line"> action_for_each_trigger(<span class="string">"init"</span>, action_add_queue_tail);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* skip mounting filesystems in charger mode */</span></span><br><span class="line"> <span class="keyword">if</span> (!is_charger) &#123;</span><br><span class="line">     action_for_each_trigger(<span class="string">"early-fs"</span>, action_add_queue_tail);</span><br><span class="line">     action_for_each_trigger(<span class="string">"fs"</span>, action_add_queue_tail);</span><br><span class="line">     action_for_each_trigger(<span class="string">"post-fs"</span>, action_add_queue_tail);</span><br><span class="line">     action_for_each_trigger(<span class="string">"post-fs-data"</span>, action_add_queue_tail);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> .......</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (is_charger) &#123;</span><br><span class="line">     action_for_each_trigger(<span class="string">"charger"</span>, action_add_queue_tail);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     action_for_each_trigger(<span class="string">"early-boot"</span>, action_add_queue_tail);</span><br><span class="line">     action_for_each_trigger(<span class="string">"boot"</span>, action_add_queue_tail);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这里会加载init.rc并进行解析，init.rc文件定义了在init进程中需要启动哪些进程服务和执行哪些动作。其详细说明参见android/system/core/init/reademe.txt。init.rc见如下定义：</p>
<p>……<br>service servicemanager /system/bin/servicemanager<br>    class core<br>    user system<br>    group system<br>    critical<br>    onrestart restart zygote<br>    onrestart restart media<br>    onrestart restart surfaceflinger<br>    onrestart restart drm</p>
<p>service vold /system/bin/vold<br>    class core<br>    socket vold stream 0660 root mount<br>    ioprio be 2</p>
<p>……..</p>
<p>service zygote /system/bin/app_process -Xzygote /system/bin –zygote –start-system-server<br>    class main<br>    socket zygote stream 660 root system<br>    onrestart write /sys/android_power/request_state wake<br>    onrestart write /sys/power/state on<br>    onrestart restart media<br>    onrestart restart netd</p>
<p>service drm /system/bin/drmserver<br>    class main<br>    user drm<br>    group drm system inet drmrpc sdcard_r</p>
<p>service media /system/bin/mediaserver<br>    class main</p>
<p>……….</p>
<p>具体解析过程见android/system/core/init/Init_parser.c。解析所得服务添加到service_list中，动作添加到action_list中。主要代码流程如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (next_token(&amp;state)) &#123;</span><br><span class="line">        <span class="keyword">case</span> T_EOF:</span><br><span class="line">            state.parse_line(&amp;state, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">goto</span> parser_done;</span><br><span class="line">        <span class="keyword">case</span> T_NEWLINE:</span><br><span class="line">            state.line++;</span><br><span class="line">            <span class="keyword">if</span> (nargs) &#123;</span><br><span class="line">                <span class="keyword">int</span> kw = lookup_keyword(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (kw_is(kw, SECTION)) &#123;</span><br><span class="line">                    state.parse_line(&amp;state, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    parse_new_section(&amp;state, kw, nargs, args);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state.parse_line(&amp;state, nargs, args);</span><br><span class="line">                &#125;</span><br><span class="line">                nargs = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> T_TEXT:</span><br><span class="line">            <span class="keyword">if</span> (nargs &lt; INIT_PARSER_MAXARGS) &#123;</span><br><span class="line">                args[nargs++] = state.text;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">parser_done:</span><br><span class="line">    list_for_each(node, &amp;import_list) &#123;</span><br><span class="line">         <span class="keyword">struct</span> import *import = node_to_item(node, struct import, list);</span><br><span class="line">         <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">         INFO(<span class="string">"importing '%s'"</span>, import-&gt;filename);</span><br><span class="line">         ret = init_parse_config_file(import-&gt;filename);</span><br><span class="line">         <span class="keyword">if</span> (ret)</span><br><span class="line">             ERROR(<span class="string">"could not import file '%s' from '%s'\n"</span>,</span><br><span class="line">                   import-&gt;filename, fn);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来在main函数中执行动作和启动进程服务：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; ;) &#123;</span><br><span class="line">......</span><br><span class="line">execute_one_command();</span><br><span class="line">        restart_processes();</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通常init过程需要创建一些系统文件夹并启动USB守护进程、Android Debug Bridge守护进程、Debug守护进程、ServiceManager进程、Zygote进程等。</p>
<p>由init.rc对ServiceManager的描述service servicemanager /system/bin/servicemanager可知servicemanager进程从platform\frameworks\base\cmd\servicemanager\Service_manager.cpp启动。在main函数中有如下代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> binder_state *bs;</span><br><span class="line">    <span class="keyword">void</span> *svcmgr = BINDER_SERVICE_MANAGER;</span><br><span class="line"></span><br><span class="line">    bs = binder_open(<span class="number">128</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (binder_become_context_manager(bs)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot become context manager (%s)\n"</span>, strerror(errno));</span><br><span class="line">        return <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    svcmgr_handle = svcmgr;</span><br><span class="line">    binder_loop(bs, svcmgr_handler);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在android/framework/base/cmd/servicemanager/Binder.c中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_become_context_manager</span><span class="params">(<span class="keyword">struct</span> binder_state *bs)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    return ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上首先调用binder_open()打开Binder设备(/dev/binder)，调用binder_become_context_manager()把当前进程设置为ServiceManager。ServiceManager本身就是一个服务。最后binder_loop()进入循环状态，并设置svcmgr_handler回调函数等待添加、查询、获取服务等请求。</p>
<p>在启动servicemanager的同时，再来启动Zygote，由init.rc对zygote的描述service zygot /system/bin/app_process可知zygote进程从Android\frameworks\base\cmds\app_process\App_main.cpp启动。这个文件的main（）方法，会调用Android_Runtime.cpp的文件中的start（）方法，这个方法通过JNI机制，来调用ZygoteInit.java孵化器初始文件，这个文件的Main（）函数，将会去调用所有进程。其主要代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (!parentDir) &#123;</span><br><span class="line">            parentDir = arg;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">"--zygote"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = <span class="string">"zygote"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">"--start-system-server"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(arg, <span class="string">"--application"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(arg, <span class="string">"--nice-name="</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName = arg + <span class="number">12</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            className = arg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">........</span><br><span class="line"><span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>,</span><br><span class="line">                startSystemServer ? <span class="string">"start-system-server"</span> : <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        <span class="comment">// Remainder of args get passed to startup class main()</span></span><br><span class="line">        runtime.mClassName = className;</span><br><span class="line">        runtime.mArgC = argc - i;</span><br><span class="line">        runtime.mArgV = argv + i;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>,</span><br><span class="line">                application ? <span class="string">"application"</span> : <span class="string">"tool"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</span><br><span class="line">        return <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中runtime是AppRuntime类型，而AppRuntime继承至AndroidRuntime。我们继续跟踪 runtime.start函数：因在AppRuntime中没有对start的复写，我们到AppRuntime查看start的实现，路劲：android/framework/base/core/init<br>代码如下：注意runtime.start所传的参数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> <span class="keyword">char</span>* options)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(options, <span class="string">"start-system-server"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* start the virtual machine */</span></span><br><span class="line"> JNIEnv* env;</span><br><span class="line"> <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class="number">0</span>) &#123;</span><br><span class="line">return;</span><br><span class="line"> &#125;</span><br><span class="line"> onVmCreated(env);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Start VM.  This thread becomes the main thread of the VM, and will</span><br><span class="line">     * not return until the VM exits.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);     <span class="comment">//com.android.internal.os.ZygoteInit</span></span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line">	    ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即先启动了虚拟机，然后利用JNI调用了zygoteInit。路劲：android/framework/base/core/java/com/android/internal/os在ZygoteInit的main中</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (argv[<span class="number">1</span>].equals(<span class="string">"start-system-server"</span>)) &#123;</span><br><span class="line">                startSystemServer();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!argv[<span class="number">1</span>].equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                throw new RuntimeException(argv[<span class="number">0</span>] + USAGE_STRING);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们继续跟踪startSystemServer() ， 在startSystemServer()中 ：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static boolean startSystemServer() throws </span><br><span class="line">	MethodAndArgsCaller, RuntimeException &#123;</span><br><span class="line">        String args[] = &#123;</span><br><span class="line">            ...</span><br><span class="line">            "--runtime-init",</span><br><span class="line">            "--nice-name=system_server",</span><br><span class="line">            "com.android.server.SystemServer",</span><br><span class="line">        &#125;;</span><br><span class="line">       </span><br><span class="line">        try &#123;</span><br><span class="line">            parsedArgs = new ZygoteConnection.Arguments(args);</span><br><span class="line">            ...</span><br><span class="line">            pid = Zygote.forkSystemServer(</span><br><span class="line">                    ...</span><br><span class="line">                    parsedArgs.permittedCapabilities,</span><br><span class="line">                    parsedArgs.effectiveCapabilities);</span><br><span class="line">        &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">            throw new RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> Zygote包装了Linux的fork。forkSystemServer()调用forkAndSpecialize()，最终穿过虚拟机调用android\dalvik\vm\native\dalvik_system_Zygote.c中Dalvik_dalvik_system_Zygote_forkAndSpecialize()。由dalvik完成fork新的进程。<br> main()最后会调用runSelectLoopMode()，进入while循环，由peers创建新的进程。</p>
<p>我们跳转至com.android.server.SystemServer中,目录：android/framework/base/services/java/com/android/server </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	...</span><br><span class="line">        init1(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在其main()函数中调用了init1(args)这个native函数，利用JNI机制，跟踪至frameworks/base/services/jni/com_android_server_systemService.cpp，然后到<br>frameworks/base/cmds/system_server/library/system_init.cpp在system_init()函数中有如下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">"1"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Start the SurfaceFlinger</span></span><br><span class="line">    SurfaceFlinger::instantiate();</span><br><span class="line">&#125;</span><br><span class="line">AndroidRuntime* runtime = AndroidRuntime::getRuntime();</span><br><span class="line">...</span><br><span class="line">LOGI(<span class="string">"System server: starting Android services./n"</span>);</span><br><span class="line">runtime-&gt;callStatic(<span class="string">"com/android/server/SystemServer"</span>, <span class="string">"init2"</span>);</span><br></pre></td></tr></table></figure></p>
<p>  即完成了SurfaceFlinger的实例化，然后利用运行时的callStatic()函数调用了SystemServer的init2()函数.代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">void</span> <span class="title">init2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Slog.i(TAG, <span class="string">"Entered the Android system server!"</span>);</span><br><span class="line">       Thread thr = new ServerThread();</span><br><span class="line">       thr.setName(<span class="string">"android.server.ServerThread"</span>);</span><br><span class="line">       thr.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个ServerThread线程中，就可以看到我们熟悉的Android服务了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,</span><br><span class="line">        SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ContentService contentService = null;</span><br><span class="line">    LightsService lights = null;</span><br><span class="line">    PowerManagerService power = null;</span><br><span class="line">    DynamicPManagerService dpm = null;</span><br><span class="line">    DisplayManagerService display = null;</span><br><span class="line">    BatteryService battery = null;</span><br><span class="line">    VibratorService vibrator = null;</span><br><span class="line">    AlarmManagerService alarm = null;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">try</span> &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Status Bar"</span>);</span><br><span class="line">            statusBar = new StatusBarManagerService(context, wm);</span><br><span class="line">            ServiceManager.addService(Context.STATUS_BAR_SERVICE, statusBar);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            reportWtf(<span class="string">"starting StatusBarManagerService"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Clipboard Service"</span>);</span><br><span class="line">            ServiceManager.addService(Context.CLIPBOARD_SERVICE,</span><br><span class="line">                    new ClipboardService(context));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            reportWtf(<span class="string">"starting Clipboard Service"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"NetworkManagement Service"</span>);</span><br><span class="line">            networkManagement = NetworkManagementService.create(context);</span><br><span class="line">            ServiceManager.addService(Context.NETWORKMANAGEMENT_SERVICE, networkManagement);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            reportWtf(<span class="string">"starting NetworkManagement Service"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    Looper.loop();</span><br><span class="line">    Slog.d(TAG, <span class="string">"System ServerThread is exiting!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后，调用各服务的systemReady()函数通知系统就绪,至此，系统的启动过程结束.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yii项目实践]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/18/yii%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$criteria = <span class="keyword">new</span> CDbCriteria();  </span><br><span class="line">$criteria-&gt;order = <span class="string">' ctimedesc'</span>;         <span class="comment">//按什么字段来排序  </span></span><br><span class="line">$count =NewsComments::model()-&gt;count($criteria);<span class="comment">//count()函数计算数组中的单元数目或对象中的属性个数。  </span></span><br><span class="line">$pager = <span class="keyword">new</span> CPagination($count);  </span><br><span class="line">$pager -&gt; pageSize =<span class="number">5</span>;                           <span class="comment">//每页显示的行数  </span></span><br><span class="line">$pager-&gt;applyLimit($criteria);  </span><br><span class="line">$newsCommentList =NewsComments::model()-&gt;findAll($criteria);<span class="comment">//查询所有的数据  </span></span><br><span class="line">  </span><br><span class="line">$this-&gt;render(<span class="string">'view'</span> , <span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'pages'</span>=&gt;$pager,  </span><br><span class="line">    <span class="string">'list'</span>=&gt;$newsCommentList,  </span><br><span class="line">  ));  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">//然后在view视图中：  </span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> $this-&gt;widget(<span class="string">'CLinkPager'</span>,<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'header'</span>=&gt;<span class="string">''</span>,  </span><br><span class="line">  <span class="string">'firstPageLabel'</span>=&gt;<span class="string">'首页'</span>,  </span><br><span class="line">  <span class="string">'lastPageLabel'</span>=&gt;<span class="string">'末页'</span>,  </span><br><span class="line">  <span class="string">'prevPageLabel'</span>=&gt;<span class="string">'上一页'</span>,  </span><br><span class="line">  <span class="string">'nextPageLabel'</span>=&gt;<span class="string">'下一页'</span>,  </span><br><span class="line">  <span class="string">'pages'</span>=&gt;$pages,  </span><br><span class="line">  <span class="string">'maxButtonCount'</span>=&gt;<span class="number">13</span>,  </span><br><span class="line"> ));  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在时间段中查找相应数据"><a href="#在时间段中查找相应数据" class="headerlink" title="在时间段中查找相应数据"></a>在时间段中查找相应数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//在Models的search()函数中添加  </span></span><br><span class="line">$criteria-&gt;compare(<span class="string">'mtime'</span>,<span class="string">'&gt;='</span>.$this-&gt;ctime,<span class="keyword">true</span>);    </span><br><span class="line">$criteria-&gt;compare(<span class="string">'mtime'</span>,<span class="string">'&lt;='</span>.$this-&gt;mtime,<span class="keyword">true</span>);  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">//例如与第三方时间控件进行整合时，在_search视图中使用代码如下：  </span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;label($model,<span class="string">'ctime'</span>);<span class="meta">?&gt;</span>  </span><br><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">  $this-&gt;widget(<span class="string">'application.extensions.timepicker.timepicker'</span>,<span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'model'</span>=&gt;$model,  </span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'ctime'</span>,  </span><br><span class="line">  ));  </span><br><span class="line"> <span class="meta">?&gt;</span>  </span><br><span class="line">  </span><br><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line">  $this-&gt;widget(<span class="string">'application.extensions.timepicker.timepicker'</span>,<span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'model'</span>=&gt;$model,  </span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'mtime'</span>,  </span><br><span class="line">  ));  </span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="对查询的数据进行排序并显示"><a href="#对查询的数据进行排序并显示" class="headerlink" title="对查询的数据进行排序并显示"></a>对查询的数据进行排序并显示</h3><p>可以在Models的search()方法中添加如下代码:  </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>&gt;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CActiveDataProvider(get_class($this), <span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'pagination'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'pageSize'</span>=&gt;<span class="number">20</span>,<span class="comment">//设置每页显示20条  </span></span><br><span class="line">  ),  </span><br><span class="line">  <span class="string">'sort'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">    <span class="string">'defaultOrder'</span>=&gt;<span class="string">'comment_idDESC'</span>, <span class="comment">//按指定的字段进行排序  </span></span><br><span class="line">  ),  </span><br><span class="line">  <span class="string">'criteria'</span>=&gt;$criteria,  </span><br><span class="line">));  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在视图中显示非数据库表中的数据"><a href="#在视图中显示非数据库表中的数据" class="headerlink" title="在视图中显示非数据库表中的数据"></a>在视图中显示非数据库表中的数据</h3><p>//a.首先在视图中将对应的字段进行替换。如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//   'status',  </span></span><br><span class="line"><span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'name'</span>=&gt;<span class="string">'status'</span>,  </span><br><span class="line">  <span class="string">'type'</span>=&gt;<span class="string">'raw'</span>,  </span><br><span class="line">  <span class="string">'value'</span>=&gt;<span class="keyword">array</span>($this,<span class="string">'showStatus'</span>)  </span><br><span class="line">),  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>//b.然后在对应的控制器中写相应的方法。如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showStatus</span><span class="params">($data, $row, $c)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line"> <span class="keyword">switch</span> ($data-&gt;status)  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'ready'</span>:  </span><br><span class="line">   <span class="keyword">return</span><span class="string">'准备'</span>;  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'locked'</span>:  </span><br><span class="line">   <span class="keyword">return</span> <span class="string">'锁定'</span>;  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'open'</span>:  </span><br><span class="line">   <span class="keyword">return</span><span class="string">'打开'</span>;  </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'removed'</span>:  </span><br><span class="line">   <span class="keyword">return</span><span class="string">'删除'</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="修改admin视图下默认的CButtonColumn"><a href="#修改admin视图下默认的CButtonColumn" class="headerlink" title="修改admin视图下默认的CButtonColumn"></a>修改admin视图下默认的CButtonColumn</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">array</span>(  </span><br><span class="line"> <span class="string">'class'</span>=&gt;<span class="string">'CButtonColumn'</span>,  </span><br><span class="line"> <span class="string">'template'</span>=&gt;<span class="string">'&#123;comment&#125; &#123;view&#125;&#123;update&#125; &#123;delete&#125;'</span>,  </span><br><span class="line"> <span class="string">'buttons'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'comment'</span> =&gt;<span class="keyword">array</span>(  </span><br><span class="line">   <span class="string">'label'</span>=&gt;<span class="string">'评论'</span>,  </span><br><span class="line">   <span class="string">'imageUrl'</span>=&gt;Yii::app()-&gt;request-&gt;baseUrl.<span class="string">'/images/icons/coins.png'</span>,  </span><br><span class="line">   <span class="string">'url'</span>=&gt;<span class="string">'Yii::app()-&gt;createUrl("newsComments/index",array("news_id"=&gt;$data-&gt;news_id, ))'</span>,<span class="comment">//始终使用$data来获取相关的数据。  </span></span><br><span class="line">  ),  </span><br><span class="line"> ),  </span><br><span class="line"> <span class="string">'htmlOptions'</span> =&gt; <span class="keyword">array</span>(  </span><br><span class="line">   <span class="string">'style'</span>=&gt;<span class="string">'width:100px'</span>,  </span><br><span class="line"> ),  </span><br><span class="line">),  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ckfinder"><a href="#ckfinder" class="headerlink" title="ckfinder"></a>ckfinder</h3><p>需要调用ckfinder直接弹出上传文件的相关目录，以便可以选择特定的图片，并将该图片的相关地址存入文本框中。一般在_from视图中进行数据的创建以及更新时可以用到。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>src=<span class="string">"../pkjueying/ckfinder/ckfinder.js"</span>&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BrowseServer</span>(<span class="params">imgId</span>)  </span><br><span class="line"></span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> finder = <span class="keyword">new</span> CKFinder() ;  </span><br><span class="line"> finder.basePath = <span class="string">'../pkjueying/ckfinder/'</span>;<span class="comment">//导入CKFinder的路径  </span></span><br><span class="line"> finder.selectActionFunction = SetFileField;<span class="comment">//设置文件被选中时的函数  </span></span><br><span class="line"> finder.selectActionData = imgId; <span class="comment">//接收地址的inputID  </span></span><br><span class="line"> finder.popup() ;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetFileField</span>(<span class="params">fileUrl,data</span>)  </span><br><span class="line"></span>&#123;  </span><br><span class="line"> <span class="built_in">document</span>.getElementByIdx_x_x(data[<span class="string">"selectActionData"</span>]).value= fileUrl ;  </span><br><span class="line">&#125;  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span>  </span><br><span class="line"> <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>$form-&gt;labelEx($model,<span class="string">'editor_avatar'</span>);<span class="meta">?&gt;</span></span>  </span><br><span class="line"> <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>$form-&gt;textField($model ,<span class="string">'editor_avatar'</span> ,<span class="keyword">array</span>(<span class="string">'id'</span>=&gt;<span class="string">'editor_avatar'</span>, ));<span class="meta">?&gt;</span></span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">" 浏 览 "</span><span class="attr">onclick</span>=<span class="string">"BrowseServer('editor_avatar');"</span> /&gt;</span>  </span><br><span class="line"> <span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>$form-&gt;error($model,<span class="string">'editor_avatar'</span>);<span class="meta">?&gt;</span></span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 使用第三方ckeditor+ckfinder控件</span><br><span class="line"></span><br><span class="line">// 示例代码如下：  </span><br><span class="line">```php</span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">echo</span> $form-&gt;labelEx($model,<span class="string">'summary'</span>);  </span><br><span class="line">$form-&gt;widget(<span class="string">'application.extensions.editor.CKkceditor'</span>,<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">"model"</span> =&gt;$model, <span class="comment">// 数据模型  </span></span><br><span class="line">  <span class="string">"attribute"</span> =&gt;<span class="string">'summary'</span>, <span class="comment">// 文本域中的字段，也就是之前文本域的名字  </span></span><br><span class="line">  <span class="string">"height"</span> =&gt;<span class="string">'200px'</span>, <span class="comment">// 编辑器的高度  </span></span><br><span class="line">  <span class="string">"width"</span> =&gt;<span class="string">'80%'</span>,         <span class="comment">//编辑器的宽度  </span></span><br><span class="line">  <span class="string">"filespath"</span>=&gt;SITE_PATH.<span class="string">"www/data/upload"</span>,  </span><br><span class="line">  <span class="string">"filesurl"</span>=&gt;Yii::app()-&gt;baseUrl.<span class="string">"/data/upload"</span>,  </span><br><span class="line">  )  </span><br><span class="line">);  </span><br><span class="line"><span class="keyword">echo</span> $form-&gt;error($model,<span class="string">'summary'</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="由数据库表生成所需的代码"><a href="#由数据库表生成所需的代码" class="headerlink" title="由数据库表生成所需的代码"></a>由数据库表生成所需的代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="string">'modules'</span> =&gt;   <span class="keyword">array</span>(  </span><br><span class="line"> <span class="string">'gii'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'class'</span>=&gt;<span class="string">'system.gii.GiiModule'</span>,  </span><br><span class="line">  <span class="string">'password'</span>=&gt;<span class="string">'pkjueying'</span>,  </span><br><span class="line">  <span class="comment">// If removed, Gii defaults tolocalhost only. Edit carefully to taste.  </span></span><br><span class="line">  <span class="string">'ipFilters'</span>=&gt;<span class="keyword">array</span>(<span class="string">'10.10.16.43'</span>,<span class="string">'10.10.16.18'</span>,<span class="string">'10.10.16.47'</span>,<span class="string">'::1'</span>),  </span><br><span class="line"> ),  </span><br><span class="line">),  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="由Yii生成静态页面"><a href="#由Yii生成静态页面" class="headerlink" title="由Yii生成静态页面"></a>由Yii生成静态页面</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//在action函数中修改函数的参数，添加第三个参数，设置为true.思路如下：  </span></span><br><span class="line">$out_file = $this-&gt;render($view,$data,<span class="keyword">true</span>);  </span><br><span class="line">save_to_html($path, $out_file);<span class="comment">//此函数仅仅是示例，具体实现自己写。把$out_file存到指定目录，自己命名  </span></span><br><span class="line"><span class="keyword">unset</span>($outFile);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="yii的controller中外挂action"><a href="#yii的controller中外挂action" class="headerlink" title="yii的controller中外挂action"></a>yii的controller中外挂action</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateAction</span> <span class="keyword">extends</span> <span class="title">CAction</span> </span>&#123;   </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   </span><br><span class="line"> <span class="comment">// place the action logichere   </span></span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">CController</span></span>&#123;   </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span>&#123;   </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'edit'</span>=&gt;<span class="string">'application.controllers.post.UpdateAction'</span>,);   </span><br><span class="line">  &#125;   </span><br><span class="line">  ....  </span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="如何使用theme"><a href="#如何使用theme" class="headerlink" title="如何使用theme"></a>如何使用theme</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//在main.php 里面配置  </span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'theme'</span>=&gt;<span class="string">'basic'</span>,  </span><br><span class="line">  <span class="comment">//......  </span></span><br><span class="line">);  </span><br><span class="line"><span class="comment">//要使用theme里面的资源的话，比如说images, js, css, 应该这样，  </span></span><br><span class="line">Yii::app()-&gt;theme-&gt;baseUrl.”/images/FileName.gif”  </span><br><span class="line">Yii::app()-&gt;Theme-&gt;baseUrl.”/css/<span class="keyword">default</span>/common.css”  </span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在当前页面注册css和js文件"><a href="#在当前页面注册css和js文件" class="headerlink" title="在当前页面注册css和js文件"></a>在当前页面注册css和js文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> $cs=Yii::app()-&gt;clientScript;  </span><br><span class="line"> $cs-&gt;registerCssFile($cssFile);  </span><br><span class="line"> $cs-&gt;registerScriptFile($jsFile);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用widget方式。"><a href="#使用widget方式。" class="headerlink" title="使用widget方式。"></a>使用widget方式。</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//a.显示详细信息  </span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$this-&gt;widget(<span class="string">'zii.widgets.CDetailView'</span>,<span class="keyword">array</span>(   </span><br><span class="line">    <span class="string">'data'</span>=&gt; $model,   </span><br><span class="line">    <span class="string">'attributes'</span>=&gt; <span class="keyword">array</span>(   </span><br><span class="line">       <span class="string">'id'</span>,   </span><br><span class="line">       <span class="string">'title'</span>,   </span><br><span class="line">       <span class="string">'content'</span>,   </span><br><span class="line">   ),   </span><br><span class="line">);  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//b.显示列表，可以进行条件限制和分页  </span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//controller中  </span></span><br><span class="line">$dataProvider = <span class="keyword">new</span> CActiveDataProvider(<span class="string">'Post'</span>,<span class="keyword">array</span>(   </span><br><span class="line">    <span class="string">'criteria'</span>=&gt; <span class="keyword">array</span>(   </span><br><span class="line">           <span class="string">'condition'</span> =&gt; <span class="string">'project_id =:project_id'</span>,   </span><br><span class="line">           <span class="string">'params'</span> =&gt; <span class="keyword">array</span>(<span class="string">':project_id'</span> =&gt;$pid),   </span><br><span class="line">       ),   </span><br><span class="line">    <span class="string">'pagination'</span>=&gt; <span class="keyword">array</span>(   </span><br><span class="line">       <span class="string">'pageSize'</span> =&gt; <span class="string">'5'</span>,   </span><br><span class="line">   ),   </span><br><span class="line">));  </span><br><span class="line"><span class="comment">//视图中  </span></span><br><span class="line">$this-&gt;widget(<span class="string">'zii.widgets.CListView'</span>,<span class="keyword">array</span>(   </span><br><span class="line"> <span class="string">'dataProvider'</span> =&gt; $dataProvider,<span class="comment">//数据源   </span></span><br><span class="line"> <span class="string">'itemView'</span> =&gt; <span class="string">'_view'</span>,<span class="comment">//渲染子视图，传给模板的值用$data接收。   </span></span><br><span class="line"> ),   </span><br><span class="line">);   </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//c.显示列表，但是结果会在表格中显示  </span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">   $this-&gt;widget(<span class="string">'zii.widgets.grid.CGridView'</span>,<span class="keyword">array</span>(   </span><br><span class="line">       <span class="string">'dataProvider'</span>=&gt;$dataProvider,<span class="comment">//数据源   </span></span><br><span class="line">       <span class="string">'columns'</span>=&gt;<span class="keyword">array</span>(   </span><br><span class="line">           <span class="string">'title'</span>,         <span class="comment">// display the 'title' attribute   </span></span><br><span class="line">           <span class="string">'category.name'</span>,  <span class="comment">// display the 'name' attributeof the 'category' relation//显示与category相关的name   </span></span><br><span class="line">           <span class="string">'content:html'</span>,   <span class="comment">// display the'content' attribute as purified HTML显示净化过的HTML格式   </span></span><br><span class="line">           <span class="keyword">array</span>(           <span class="comment">// display 'create_time' using anexpression   </span></span><br><span class="line">               <span class="string">'name'</span>=&gt;<span class="string">'create_time'</span>,   </span><br><span class="line">               <span class="string">'value'</span>=&gt;<span class="string">'date("M j, Y",$data-&gt;create_time)'</span>,   </span><br><span class="line">           ),   </span><br><span class="line">           <span class="keyword">array</span>(           <span class="comment">// display 'author.username' using anexpression   </span></span><br><span class="line">               <span class="string">'name'</span>=&gt;<span class="string">'authorName'</span>,   </span><br><span class="line">               <span class="string">'value'</span>=&gt;<span class="string">'$data-&gt;author-&gt;username'</span>,   </span><br><span class="line">           ),   </span><br><span class="line">   <span class="keyword">array</span>(   <span class="comment">//display the 'status' attribute of controller's functionshowStatus($data, $row, $c)  </span></span><br><span class="line">    <span class="string">'name'</span>=&gt;<span class="string">'status'</span>,  </span><br><span class="line">    <span class="string">'type'</span>=&gt;<span class="string">'raw'</span>,  </span><br><span class="line">    <span class="string">'value'</span>=&gt;<span class="keyword">array</span>($this,<span class="string">'showStatus'</span>)  </span><br><span class="line">   ),  </span><br><span class="line">           <span class="keyword">array</span>(           <span class="comment">// display a column with "view", "update" and "delete"buttons   </span></span><br><span class="line">               <span class="string">'class'</span>=&gt;<span class="string">'CButtonColumn'</span>,   </span><br><span class="line">           ),   </span><br><span class="line">       ),   </span><br><span class="line">       <span class="string">'filter'</span>=&gt;$model,<span class="comment">//对用户的输入进行过滤   </span></span><br><span class="line">   ));   </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="urlManager的配置"><a href="#urlManager的配置" class="headerlink" title="urlManager的配置"></a>urlManager的配置</h3><p>//a.apache下：在config/main.php的components节点下增加：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> <span class="string">'urlManager'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'urlFormat'</span>=&gt;<span class="string">'path'</span>,        </span><br><span class="line">  <span class="string">'rules'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;id:\d+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/view'</span>,  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;action:\w+&gt;/&lt;id:\d+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;action:\w+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class="line">  ),  </span><br><span class="line"> ),  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>//b.apache配置：  </p>
<p>在app的根目录(项目目录，同入口index.php)创建.htaccess文件。内容如下：  </p>
<p>Options +FollowSymLinks<br>IndexIgnore <em>/</em><br>RewriteEngine on<br># if a directory or a file exists, use it directly<br>RewriteCond %{REQUEST_FILENAME} !-f<br>RewriteCond %{REQUEST_FILENAME} !-d<br># otherwise forward it to index.php<br>RewriteRule . index.php  </p>
<p>//c.nginx下的配置<br>//在config/main.php的components节点下增加：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> <span class="string">'urlManager'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">  <span class="string">'urlFormat'</span>=&gt;<span class="string">'path'</span>,        </span><br><span class="line">  <span class="string">'rules'</span>=&gt;<span class="keyword">array</span>(  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;id:\d+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/view'</span>,  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;action:\w+&gt;/&lt;id:\d+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class="line">   <span class="string">'&lt;controller:\w+&gt;/&lt;action:\w+&gt;'</span>=&gt;<span class="string">'&lt;controller&gt;/&lt;action&gt;'</span>,  </span><br><span class="line">  ),  </span><br><span class="line"> ),  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>//step2：<br>//在nginx.conf的server 段添加:<br>location / {<br>    if (!-e$request_filename){<br>       rewrite ^/(.*) /index.php last;<br>   }<br>}  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[罗马人的故事01]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/18/%E7%BD%97%E9%A9%AC%E4%BA%BA%E7%9A%84%E6%95%85%E4%BA%8B01/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[binder简要学习]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/17/binder01/</url>
      <content type="html"><![CDATA[<h1 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h1><h3 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h3><p>理解Binder对于理解整个Android系统有着非常重要的作用，Android系统的四大组件，AMS，PMS等系统服务无一不与Binder挂钩；如果对Binder不甚了解，那么就很难了解这些系统机制.</p>
<p>要真正的弄明白 Binder机制 还是比较麻烦的，我们今天只是大致的介绍一下在应用层怎么使用</p>
<p>本文目标:</p>
<ul>
<li><p>不依赖AIDL工具，手写远程Service完成跨进程通信</p>
</li>
<li><p>弄明白AIDL生成的相关代码</p>
</li>
<li><p>以及基于AIDL代码的分析，了解系统相关服务的代码逻辑.</p>
</li>
</ul>
<h3 id="Linux相关概念"><a href="#Linux相关概念" class="headerlink" title="Linux相关概念"></a>Linux相关概念</h3><p>因为是讲进程间的通信，而android又是基于linux，所以对于linux系统需要一定的了解.<br>推荐 <a href="https://book.douban.com/subject/1503819/" target="_blank" rel="external">linux内核设计与实现</a> 其主要是讲一些系统概念</p>
<ul>
<li><p>操作系统的不同进程之间，数据不共享；对于每个进程来说，都以为自己独享了整个系统，完全不知道其他进程的存在；因此一个进程需要与另外一个进程通信，需要某种 <strong>系统机制</strong> 才能完成。</p>
</li>
<li><p>用户程序只可以访问某些许可的资源，不许可的资源是拒绝被访问的，于是认为的就把Kernel和上层的应用程序抽像的隔离开，分别称之为 <strong>内核空间(Kernel Space)</strong> 和 <strong>用户空间(User Space)</strong> .</p>
</li>
<li><p>用户空间访问内核空间的唯一方式就是 <strong>系统调用</strong> ；通过这个统一入口，所有的资源访问都是在内核的控制下执行，以免导致用户程序对系统资源的越权访问，从而保障了系统的安全和稳定.</p>
</li>
<li><p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，我们就称进程处于 <strong>内核运行态</strong> 此时处理器处于特权级最高的内核代码中执行。当进程在执行用户自己的代码时，则称其处于 <strong>用户运行态</strong>（用户态）。处理器在特权等级高的时候才能执行那些特权CPU指令。</p>
</li>
<li><p>通过系统调用，用户空间可以访问内核空间. 如果一个用户空间想与另外一个用户空间进行通信，一般是需要操作系统内核添加支持. </p>
</li>
<li><p>Linux有个比较好的机制，就是可以 <strong>动态加载内核模块</strong> ；<strong>模块</strong> 是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行。</p>
<p>  这样，Android系统就可以在Linux的基础之上，通过添加一个内核模块运行在内核空间，用户进程之间可通过这个模块完成通信。这个模块就是所谓的 <strong>Binder驱动</strong> .</p>
<p>  尽管名叫‘驱动’，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的：它工作于内核态，提供open()，mmap()，poll()，ioctl()等标准文件设备的操作.</p>
</li>
<li><p>Linux已拥有的进程间通信IPC手段包括： Pipe、Signal、Socket、Message、Share Memory 和信号量Semaphore.</p>
</li>
</ul>
<h3 id="为何使用Binder"><a href="#为何使用Binder" class="headerlink" title="为何使用Binder"></a>为何使用Binder</h3><p>为什么要单独弄一套， 而不是使用linux系统提供的那些进程间通信的方式</p>
<p>主要是考虑到性能和安全，还有易用. </p>
<ul>
<li><p>最易想到的就是利用存储-转发机制：使用Linux 提供的系统调用接口：copy_from_user()和copy_to_user() 来实现进程间通信，缺点是效率低下，需要做两次拷贝：用户空间-&gt;内核空间-&gt;用户空间。</p>
</li>
<li><p>Binder驱动 为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间， 所以Binder机制只需要一次拷贝。</p>
</li>
<li><p>而共享内存的话，效率比较高， 但控制复杂….</p>
</li>
<li><p>安全性: 传统IPC没有任何安全措施，完全依赖上层协议来确保；传统IPC访问接入点是开放的，无法建立私有通道；例如Socket通信的话，socket的ip地址或文件名都是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。</p>
</li>
</ul>
<blockquote>
<p>Binder基于Client-Server通信模式，传输过程只需一次拷贝，为发送发添加UID/PID身份，既支持实名Binder也支持匿名Binder，安全性高。</p>
</blockquote>
<h3 id="Binder通信模型"><a href="#Binder通信模型" class="headerlink" title="Binder通信模型"></a>Binder通信模型</h3><p>应用层大家所熟知的通信结构， 如下图:</p>
<p><img src="/img/binder/binder通信概述.jpg" alt="Binder通信概述"></p>
<ol>
<li>从表面上来看，是client通过获得一个server的代理接口，对server进行直接调用；</li>
<li>实际上，代理接口中定义的方法与server中定义的方法是一一对应的；</li>
<li>client调用某个代理接口中的方法时，代理接口的方法会将client传递的参数打包成为Parcel对象；</li>
<li>代理接口将该Parcel发送给内核中的binder driver.</li>
<li>server会读取binder driver中的请求数据，如果是发送给自己的，解包Parcel对象，处理并将结果返回；</li>
<li>整个的调用过程是一个同步过程，在server处理的时候，client会block住。</li>
</ol>
<p>在整个Binder系统中，Binder框架定义了四个角色：Server，Client，ServiceManager 以及Binder驱动。其中Server，Client，SM运行于用户空间，驱动运行于内核空间</p>
<p><img src="/img/binder/binder-通信模型.jpg" alt="Binder通信模型"></p>
<p>整个步骤如下: </p>
<ul>
<li><p>SM建立；首先有一个进程向驱动提出申请为SM；驱动同意之后，SM进程负责管理Service.</p>
</li>
<li><p>各个Server向SM注册；将Server自己的名字和内存地址报告给SM; 这样SM就建立了一张表，对应着各个Server的名字和地址</p>
</li>
<li><p>Client想要与Server通信，首先询问SM；通过服务名获取到对应的内存地址；Client收到之后，就可以进行通信了.</p>
<p>  可以看出驱动是整个通信过程的核心，完成跨进程通信的秘密全部隐藏在驱动里面；这里Client与SM的通信，以及Client与Server的通信，都会经过驱动</p>
</li>
</ul>
<blockquote>
<p>相关接口可参见 native/libs/binder/IServiceManager.cpp  以及对应的native 层 service_manager.c</p>
</blockquote>
<h3 id="Binder机制跨进程原理"><a href="#Binder机制跨进程原理" class="headerlink" title="Binder机制跨进程原理"></a>Binder机制跨进程原理</h3><p><img src="/img/binder/binder-跨进程原理.jpg" alt="Binder机制跨进程原理"></p>
<ul>
<li><p>首先，Server进程要向SM注册；告诉自己是谁，自己有什么能力;在这个场景就是Server告诉SM，它叫AAA，它有一个object对象，可以执行add 操作；于是SM建立了一张表：AAA这个名字对应进程Server; 如原代码中 .//native/libs/binder/IServiceManager.cpp</p>
<pre><code>virtual status_t addService(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,
    bool allowIsolated)
{
    Parcel data, reply;
data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());
    data.writeString16(name);
    data.writeStrongBinder(service);
    data.writeInt32(allowIsolated ? 1 : 0);
    status_t err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);
    return err == NO_ERROR ? reply.readExceptionCode() : err;
}
</code></pre></li>
<li><p>然后Client向SM查询：名字叫做AAA的进程里面的object对象；进程之间通信的数据都会经过运行在内核空间里面的驱动，驱动在数据流过的时候会做一些处理，它并不会给Client进程返回一个真正的object对象，而是返回一个看起来跟object一模一样的代理对象objectProxy，这个objectProxy也有一个add方法，但是这个add方法没有Server进程里面object对象的add方法那个能力；它唯一做的事情就是把参数包装然后交给驱动。</p>
</li>
<li><p>驱动收到这个消息，发现是这个objectProxy；通过查表就知道：之前用objectProxy替换了object发送给Client了，它真正应该要访问的是object对象的add方法；于是Binder驱动通知Server进程，调用它的object对象的add方法，然后把结果发给binder驱动，Sever进程收到这个消息，执行add之后将结果返回驱动，驱动然后把结果返回给Client进程；于是整个过程就完成了.</p>
</li>
</ul>
<p>Binder跨进程传输并不是真的把一个对象传输到了另外一个进程；传输过程是在Binder跨进程穿越的时候，它在一个进程留下了一个本体，在另外一个进程则使用该对象的一个proxy；Client进程的操作其实是对于proxy的操作，proxy利用Binder驱动最终让真正的binder对象完成操作。</p>
<p>Android系统实现这种机制使用的是代理模式, 对于Binder的访问，如果是在同一个进程，那么直接返回原始的Binder实体；如果在不同进程，那么就给他一个代理对象- 在后面的demo中我们可以看见…</p>
<pre><code>public static ICalculate asInterface(IBinder obj) {
        if(obj == null) {
            return null;
        } else {
            IInterface iin = obj.queryLocalInterface(&quot;com.zhangfl.jpush.ICalculate&quot;);
            return (ICalculate)(iin != null &amp;&amp; iin instanceof ICalculate?(ICalculate)iin:new ICalculate.Stub.Proxy(obj));
        }
    }
</code></pre><blockquote>
<p>Client进程只不过是持有了Server端的代理；代理对象协助驱动完成了跨进程通信。</p>
</blockquote>
<h3 id="proxy代理模式"><a href="#proxy代理模式" class="headerlink" title="proxy代理模式"></a>proxy代理模式</h3><p>模式中的三种角色:</p>
<p><img src="/img/binder/proxy_uml.jpg" alt="proxy设计模式"></p>
<ul>
<li><p>抽象角色：声明真实对象和代理对象的共同接口。</p>
</li>
<li><p>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</p>
</li>
<li><p>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p>
</li>
</ul>
<blockquote>
<p>模式原则: 对修改关闭，对扩展开放，保证了系统的稳定性</p>
</blockquote>
<h3 id="驱动里面的Binder"><a href="#驱动里面的Binder" class="headerlink" title="驱动里面的Binder"></a>驱动里面的Binder</h3><p>略过:  具体可以参考源码以及 <a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Binder设计与实现</a> 一文</p>
<h3 id="Java层的Binder"><a href="#Java层的Binder" class="headerlink" title="Java层的Binder"></a>Java层的Binder</h3><p>IBinder/IInterface/Binder/BinderProxy/Stub</p>
<ul>
<li><p>IBinder是一个接口，它代表了一种跨进程传输的能力；只要实现了这个接口，就能将这个对象进行跨进程传递；这是驱动底层支持的；在跨进程数据流经驱动的时候，驱动会识别IBinder类型的数据，从而自动完成不同进程Binder本地对象以及Binder代理对象的转换。</p>
</li>
<li><p>IInterface代表的就是远程server对象具有的能力。具体来说，就是aidl里面的接口。</p>
</li>
<li><p>Java层的Binder类，代表的其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder, 因而都具有跨进程传输的能力；实际上，在跨越进程的时候，Binder驱动会自动完成这两个对象的转换。</p>
</li>
<li><p>在使用AIDL的时候，编译工具会给我们生成一个Stub的静态内部类；这个类继承了Binder, 说明它是一个Binder本地对象，它实现了IInterface接口，表明它具有远程Server承诺给Client的能力；Stub是一个抽象类，具体的IInterface的相关实现需要我们手动完成. 其实这里使用了策略模式.</p>
</li>
</ul>
<h3 id="AIDL过程分析"><a href="#AIDL过程分析" class="headerlink" title="AIDL过程分析"></a>AIDL过程分析</h3><p>一种固定的模式：</p>
<ul>
<li>一个需要跨进程传递的对象一定继承自IBinder，如果是Binder本地对象，那么一定继承Binder实现IInterface，如果是代理对象，那么就实现了IInterface并持有IBinder引用；</li>
</ul>
<p>Proxy与Stub不一样，虽然他们都既是Binder又是IInterface，不同的是Stub采用的是继承（is 关系），Proxy采用的是组合（has 关系）。他们均实现了所有的IInterface函数，不同的是，Stub使用策略模式调用的是虚函数（待子类实现），而Proxy则使用组合模式。为什么Stub采用继承而Proxy采用组合？事实上，Stub本身is一个IBinder（Binder），它本身就是一个能跨越进程边界传输的对象，所以它得继承IBinder实现transact这个函数从而得到跨越进程的能力（这个能力由驱动赋予）。Proxy类使用组合，是因为他不关心自己是什么，它也不需要跨越进程传输，它只需要拥有这个能力即可，要拥有这个能力，只需要保留一个对IBinder的引用</p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo."></a>demo.</h3><p>……</p>
<h3 id="系统服务分析"><a href="#系统服务分析" class="headerlink" title="系统服务分析"></a>系统服务分析</h3><p>IXXX、IXXX.Stub和IXXX.Stub.Proxy，并做好对应。这样看相关的系统服务就比较容易了，以ServiceManager为例</p>
<p>实际上ServerManager既是系统服务的管理者，同时也是一个系统服务。因此它肯定是基于Binder实现的</p>
<ul>
<li><p>与IXXX相对应的类就是IServiceManager类，封装了远程调用的几个主要函数</p>
</li>
<li><p>与IXXX.Stub对应的类就是ServiceManagerNative</p>
</li>
<li><p>与IXXX.Stub.Proxy对应的类ServiceManagerProxy</p>
<p>  查看上面相关类的代码，实际上和使用adil生成的代码没什么两样。仅仅是类命名不一样，将三个类分开写了而已。</p>
<p>  在服务端继承ServiceManagerNative类实现里面的相关方法就能实现服务端，然后在客户端将远程服务端所对应的的Binder封装成：</p>
<p>  IServiceManager iSm = ServiceManagerNative.asInterface(binder)即可</p>
<p>  PS： 实际上，在源码中找不到继承自ServiceManagerNative类的远程服务端类ServiceManagerService，根本就找不到这样一个类。原因是SMS在native层被实现成一个独立的进程，是在启动后解析init.rc脚本启动服务的.</p>
</li>
</ul>
<p>再看看ActivityManager中的Binder。</p>
<ul>
<li><p>IActivityManager对应IXXX接口</p>
</li>
<li><p>ActivityManagerNative对应IXXX.Stub类，继承自Binder类。</p>
</li>
<li><p>ActivityManagerProxy对应IXXX.Stub.Proxy类。</p>
<p>  AMS的服务端就是ActivityManagerService类，这个类继承自ActivityManagerNative，实现了IActivityManager接口中的方法用来进行IPC。</p>
<p>  只要在客户端得到了这个远程服务端的Binder引用就可以进行IPC通信了</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://book.douban.com/subject/1503819/" target="_blank" rel="external">linux内核设计与实现</a></p>
</li>
<li><p><a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Binder设计与实现</a></p>
</li>
<li><p><a href="http://blog.csdn.net/luoshengyang/article/details/6618363" target="_blank" rel="external">Android进程间通信（IPC）机制Binder简要介绍和学习计划系列</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每天随记]]></title>
      <url>https://github.com/pkjueying/pkjueying.github.io/2016/05/17/thingking-everyday/</url>
      <content type="html"><![CDATA[<h1 id="Who"><a href="#Who" class="headerlink" title="Who"></a>Who</h1><p>who am I?</p>
<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>hello, It’s me.</p>
]]></content>
    </entry>
    
  
  
</search>
